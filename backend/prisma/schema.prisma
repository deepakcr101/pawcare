// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// --- Data Models ---

model User {
  id            String    @id @default(uuid()) @map("user_id") // Use UUID for IDs
  email         String    @unique
  passwordHash  String
  firstName     String    @map("first_name")
  lastName      String    @map("last_name")
  phone                String?   @map("phoneNumber")
  address              String?
  avatarUrl     String?   @map("avatar_url")   // Optional field
  role          Role      @default(OWNER)    // Enum for roles
  createdAt     DateTime  @default(now())   @map("created_at")
  updatedAt     DateTime  @updatedAt        @map("updated_at")

  // Relationships
  pets          Pet[]
  ownedAppointments Appointment[] @relation("OwnerAppointments") // Appointments booked by this user
  staffAppointments Appointment[] @relation("StaffAppointments") // Appointments where this user is the staff
  orders        Order[]
  activityLogs        ActivityLog[] @relation("StaffActivityLogs") // Activity logs created by this user (staff)
  aiConsultations AIConsultation[]
  staffCapableOfService     StaffService[]      @relation("StaffCapableOfService")
  staffAvailabilitySchedule StaffAvailability[] @relation("StaffAvailabilitySchedule")

  @@map("users") // Map the model name "User" to table name "users" in the database
}

// Define the Role Enum
enum Role {
  OWNER
  ADMIN
  CLINIC_STAFF
  GROOMER
}

// Add other models here as we define them...

// Service Model (e.g., Vet Consultation, Grooming, Daycare
enum ServiceType {
  VETERINARY
  GROOMING
  DAYCARE
  // Add other service types as needed
}
// Your existing Service model (ensure it has @unique on name and the correct references)
model Service {
  id              String         @id @default(uuid()) @map("service_id")
  name            String         @unique // Ensure this is @unique
  type            ServiceType?   // Optional: if all services don't need a type, otherwise remove ?
  description     String?
  durationMinutes Int?           @map("duration_minutes") // Adjust nullability as per your need
  price           Decimal?       @db.Decimal(10, 2) // Adjust nullability as per your need
  isActive        Boolean        @default(true) @map("is_active")
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")

  appointments    Appointment[] // Appointments related to this service
  servicePerformedByStaff StaffService[] @relation("ServicePerformedByStaff")
  
  @@map("services")
}

// Define the AppointmentStatus Enum
enum AppointmentStatus {
  SCHEDULED
  CONFIRMED // <--- Added
  COMPLETED
  CANCELLED
  RESCHEDULED // <--- Keep this one!
  NO_SHOW   // <--- Added
}


// Your existing Pet model (ensure it connects to User)
model Pet {
  id               String        @id @default(uuid()) @map("pet_id")
  name             String
  species          String
  breed            String?
  dateOfBirth      DateTime
  medicalHistory   Json?
  vaccinationHistory Json?
  avatarUrl        String?
  ownerId          String // Foreign key to User
  owner            User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  appointments     Appointment[] // Appointments associated with this pet
  activityLogs     ActivityLog[] @relation("PetActivityLogs") // Activity logs related to this pet
  daycareBookings DaycareBooking[] @relation("PetDaycareBookings") 
  
  aiConsultations  AIConsultation[] @relation("PetAIConsultations") 

  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt

  @@map("pets")
}


model Appointment {
  id        String   @id @default(uuid())
  dateTime  DateTime // REPLACES appointmentDate and appointmentTime
  status    AppointmentStatus @default(SCHEDULED)
  notes     String?

  ownerId   String
  owner     User     @relation("OwnerAppointments", fields: [ownerId], references: [id], onDelete: Cascade)

  petId     String
  pet       Pet      @relation(fields: [petId], references: [id], onDelete: Cascade)

  serviceId String
  service   Service  @relation(fields: [serviceId], references: [id])

  staffId   String   // Consider making this non-nullable if an appointment must have staff.
                     // If staff can be assigned later, it can remain nullable, but booking logic gets complex.
  staff     User     @relation("StaffAppointments", fields: [staffId], references: [id]) // Assuming staffId will be non-null for a confirmed appointment

  activityLogs ActivityLog[] @relation("AppointmentActivityLogs")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Ensure a staff member is not double-booked.
  // If staffId can be null initially, this constraint only applies when staffId is set.
  // Or, if a service is a unique resource (e.g. one operating room), you might need a different constraint.
  @@unique([dateTime, staffId], name: "unique_staff_time_slot")
  // Remove the old unique constraint:
  // @@unique([appointmentDate, appointmentTime, serviceId]) 
  @@map("appointments")
}

// Product Category Model (for E-commerce)
model ProductCategory {
  id          String    @id @default(uuid()) @map("category_id")
  name        String    @unique
  description String?
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")

  // Relationships
  products    Product[]

  @@map("product_categories") // Map to 'product_categories' table
}

// Product Model (for E-commerce)
model Product {
  id            String          @id @default(uuid()) @map("product_id")
  name          String
  description   String?
  price         Decimal         @db.Decimal(10, 2) // Decimal type for currency
  stock         Int
  imageUrl      String?         @map("image_url")
  categoryId    String?         @map("category_id") // Optional category
  isActive      Boolean         @default(true) @map("is_active")
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")

  // Relationships
  category      ProductCategory? @relation(fields: [categoryId], references: [id])
  orderItems    OrderItem[]

  @@index([categoryId])
  @@map("products") // Map to 'products' table
}

// Order Model (for E-commerce)
model Order {
  id            String          @id @default(uuid()) @map("order_id")
  ownerId       String          @map("owner_id") // The user who placed the order
  orderDate     DateTime        @default(now()) @map("order_date")
  totalAmount   Decimal         @db.Decimal(10, 2) // Decimal type for currency
  status        OrderStatus     // Enum for order status
  paymentIntentId String?       @map("payment_intent_id") // Reference for payment gateway (Stripe/Razorpay)
  createdAt     DateTime        @default(now()) @map("created_at")
  updatedAt     DateTime        @updatedAt @map("updated_at")

  // Relationships
  owner         User            @relation(fields: [ownerId], references: [id])
  orderItems    OrderItem[]

  @@index([ownerId])
  @@map("orders") // Map to 'orders' table
}

// Define the OrderStatus Enum
enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED // Added a refunded status
}

// Order Item Model (line items for an order)
model OrderItem {
  id            String    @id @default(uuid()) @map("order_item_id")
  orderId       String    @map("order_id")
  productId     String    @map("product_id")
  quantity      Int
  priceAtPurchase Decimal @db.Decimal(10, 2) @map("price_at_purchase") // Price when the order was placed
  createdAt     DateTime  @default(now()) @map("created_at") // Useful for auditing
  updatedAt     DateTime  @updatedAt @map("updated_at") // Useful for auditing

  // Relationships
  order         Order     @relation(fields: [orderId], references: [id])
  product       Product   @relation(fields: [productId], references: [id])

  @@index([orderId])
  @@index([productId])
  @@map("order_items") // Map to 'order_items' table
}

/// --- ENUMS ---
enum DaycareBookingStatus { // Status for a single pet's daycare booking
  BOOKED
  CHECKED_IN
  CHECKED_OUT
  CANCELLED
}

enum DaycareSessionStatus { // Status for the overall daily daycare session
  AVAILABLE
  FULL
  CLOSED
}

enum ActivityType {
  FEEDING
  WALKING
  MEDICATION
  GROOMING
  VET_CHECK
  PLAYTIME
  POTTY_BREAK
  NOTE
  OTHER
}

// --- MODELS ---

// New Model: Represents the overall availability for a specific date (e.g., "July 1st: 10 spots")
model DaycareSession {
  id              String               @id @default(uuid()) @map("daycare_session_id")
  date            DateTime             @unique @db.Date // Ensures only one session per day
  totalCapacity   Int                  // Total number of spots available for this day
  currentBookings Int                  @default(0) // Counter for how many pets are currently booked into this session
  price           Decimal              // Price for this session per pet
  status          DaycareSessionStatus @default(AVAILABLE) // Overall status (AVAILABLE, FULL, CLOSED)
  createdAt       DateTime             @default(now()) @map("created_at")
  updatedAt       DateTime             @updatedAt @map("updated_at")

  // A DaycareSession can have many DaycareBookings
  daycareBookings DaycareBooking[]

  @@map("daycare_sessions")
}


// Renamed from DaycareSlot to DaycareBooking: Represents a single pet's booking into a DaycareSession
model DaycareBooking {
  id               String                 @id @default(uuid()) @map("daycare_booking_id")
  petId            String                 @map("pet_id")
  status           DaycareBookingStatus   // Status specific to this booking (BOOKED, CHECKED_IN, etc.)
  roomId           String?                @map("room_id") // Optional room assignment for this specific booking
  createdAt        DateTime               @default(now()) @map("created_at")
  updatedAt        DateTime               @updatedAt @map("updated_at")

  // Foreign key to the new DaycareSession model
  daycareSessionId String                 @map("daycare_session_id")

  // Relationships
  pet              Pet                    @relation("PetDaycareBookings", fields: [petId], references: [id])
  room             DaycareRoom?           @relation(fields: [roomId], references: [id])
  daycareSession   DaycareSession         @relation(fields: [daycareSessionId], references: [id])
  activityLogs     ActivityLog[]          @relation("DaycareActivityLogs") // Link to ActivityLog

  @@index([petId])
  @@index([roomId])
  @@index([daycareSessionId]) // Index for efficient lookups by session
  @@map("daycare_bookings")
}


// Daycare Room Model (Unchanged - looks good!)
model DaycareRoom {
  id           String         @id @default(uuid()) @map("room_id")
  name         String         @unique
  capacity     Int
  createdAt    DateTime       @default(now()) @map("created_at")
  updatedAt    DateTime       @updatedAt @map("updated_at")

  // Relationships
  daycareSlots DaycareBooking[] // Changed from DaycareSlot to DaycareBooking
  // Consider if capacity here is "per day" or "per active pet" etc.
  // We'll manage overall DaycareSession capacity and let DaycareRoom capacity be an additional constraint if needed.

  @@map("daycare_rooms")
}


// Your EXISTING ActivityLog model, adapted for DaycareBooking
model ActivityLog {
  id               String       @id @default(uuid()) @map("activity_log_id")
  petId            String       @map("pet_id")
  staffId          String       @map("staff_id") // The staff member who logged the activity
  daycareBookingId String?      @map("daycare_booking_id") // Updated to link to DaycareBooking
  appointmentId    String?      @map("appointment_id") // Optional link to an appointment
  activityType     ActivityType
  details          String // This important field was missing from my previous version
  timestamp        DateTime     @default(now()) // When the activity occurred
  createdAt        DateTime     @default(now()) @map("created_at")
  updatedAt        DateTime     @updatedAt @map("updated_at")

  // Relationships
  pet              Pet?         @relation("PetActivityLogs", fields: [petId], references: [id])
  staff            User         @relation("StaffActivityLogs", fields: [staffId], references: [id])
  // Updated relation name and type to match the new DaycareBooking model
  daycareBooking   DaycareBooking? @relation("DaycareActivityLogs", fields: [daycareBookingId], references: [id])
  appointment      Appointment? @relation("AppointmentActivityLogs", fields: [appointmentId], references: [id])

  @@index([petId])
  @@index([staffId])
  @@index([daycareBookingId]) // Make sure this index is updated
  @@index([appointmentId])
  @@map("activity_logs")
}

// AI Consultation Log Model
model AIConsultation {
  id              String    @id @default(uuid()) @map("consultation_id")
  petId           String    @map("pet_id")
  ownerId         String    @map("owner_id") // The user who requested the advice
  requestTimestamp DateTime @default(now()) @map("request_timestamp") // When the advice was requested
  petAgeInput     String    @map("pet_age_input") // The age input by the user (string as it might be "2 years" or "5 months")
  petImageUrl     String?   @map("pet_image_url") // URL to the image uploaded
  aiResponse      Json      @map("ai_response") // Store the full AI response as JSONB
  disclaimerDisplayed Boolean @default(false) @map("disclaimer_displayed") // Track if disclaimer was shown
  createdAt       DateTime  @default(now()) @map("created_at")
  updatedAt       DateTime  @updatedAt @map("updated_at")

  // Relationships
  pet             Pet       @relation("PetAIConsultations",fields: [petId], references: [id])
  owner           User      @relation(fields: [ownerId], references: [id])

  @@index([petId])
  @@index([ownerId])
  @@map("ai_consultations") // Map to 'ai_consultations' table
}

model StaffService {
  staffId   String   @map("staff_id")
  staff     User     @relation("StaffCapableOfService", fields: [staffId], references: [id], onDelete: Cascade)
  serviceId String   @map("service_id")
  service   Service  @relation("ServicePerformedByStaff", fields: [serviceId], references: [id], onDelete: Cascade)

  assignedAt DateTime @default(now()) @map("assigned_at") // Optional: when this qualification was made

  @@id([staffId, serviceId])
  @@map("staff_services")
}

model StaffAvailability {
  id        String   @id @default(uuid()) @map("staff_availability_id")
  staffId   String   @map("staff_id")
  staff     User     @relation("StaffAvailabilitySchedule", fields: [staffId], references: [id], onDelete: Cascade)
  startTime DateTime // Start of an available block
  endTime   DateTime // End of an available block
  // Example for recurring:
  // recurringRule String? // Could store an iCalendar RRule (e.g., "FREQ=WEEKLY;BYDAY=MO,TU,WE,TH,FR;BYHOUR=9;BYMINUTE=0")
  // isRecurring Boolean @default(false)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([staffId, startTime, endTime]) // Important for querying availability
  @@map("staff_availabilities")
}